# Import Api key to create an Ai class
# It is generally better practice to have the key stored as an environment variable and read it from there. 
# However, for the purpose of this script, We will store the key in a variable.

with open('Api_key.txt', 'r') as f:
# set a constant variable to the key
    API_KEY = f.readline().strip()
    
class OpenAIClient:
    """
    A client for interacting with the OpenAI API.

    Attributes:
        api_key (str): The API key for authenticating with the OpenAI API.
        model_name (str): The name of the model to use for generating responses.
        max_tokens (int): The maximum number of tokens to generate in the response.
        system_role_content (str): The content for the system role in the conversation.

    Methods:
        get_response(prompt: str) -> str:
            Generates a response from the OpenAI API based on the given prompt.
    """
 
    def __init__(self, api_key=API_KEY, model_name="gpt-4o-mini", max_tokens=4096, system_role_content="You are a helpful assistant."):
        """
        Initializes the OpenAIClient with the given parameters.

        Args:
            api_key (str): The API key for authenticating with the OpenAI API. Defaults to API_KEY.
            model_name (str): The name of the model to use for generating responses. Defaults to "gpt-3.5-turbo".
            max_tokens (int): The maximum number of tokens to generate in the response. Defaults to 2250.
            system_role_content (str): The content for the system role in the conversation. Defaults to "You are a helpful assistant.".
        """
        import openai
        openai.api_key = api_key
        self.client = openai
        self.model_name = model_name
        self.max_tokens = max_tokens
        self.system_role_content = system_role_content

    def get_response(self, prompt):
     try:
        """
        Generates a response from the OpenAI API based on the given prompt.

        Args:
            prompt (str): The prompt to send to the OpenAI API.

        Returns:
            str: The response generated by the OpenAI API.
        """
        
        # OpenAi recently updated their functions. The code suggested by Github Copilot chat and other AI sources for the chat completion
        # is outdated. The full list of changes along with all the old function names and their new names can be 
        # found at: https://github.com/openai/openai-python/discussions/742 at the end of the page under the heading
        # "ALL NAME CHANGES".
        response = self.client.chat.completions.create(
            model=self.model_name,
            messages=[
                {"role": "system", "content": self.system_role_content},
                {"role": "user", "content": prompt}
            ],
            max_tokens=self.max_tokens
        )
        return response.choices[0].message.content.strip()
     except Exception as e:
        print(e)

  
    
if __name__ == "__main__":
    print()
    a = OpenAIClient(model_name="gpt-4o")
    print(a.get_response("""Who is Eliezer Yudkowsky? And do you agree with his views on AI?"""))
    print()
    print('-----------------------------------------------')
    b = OpenAIClient()
    topics = ["adventure", "mystery", "science fiction", "romance",
              "thriller", "cybercrime", "horror"]
    
    for topic in topics:
        print(topic)
        print(b.get_response(f"List the two most sophisticated books of all time in the {topic} genre."))
